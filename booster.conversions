//
// booster.conversions
//   parameter conversions and polynomials used in Booster lattice
//
// MAD file originally developed by M.Tanaka and A.Luccio for
// Slow Extracted Beam from the Booster.
//
// MODIFICATIONS APRIL 1992 BY MMB FOR NONLINEAR EFFECTS
//------------------------------------------------------------------- 
// MODIFICATIONS oct 1992 BY AUL FOR NONLINEAR EFFECTS 
//------------------------------------------------------------------- 
// MODIFICATIONS oct 2001 BY KAB FOR HIGH PRECISION TUNE PREDICTIONS
//===================================================================
// 
// Expected Variables:
//   1.  IDIPO               = for main dipole current
//   2.  BRHO                = used in tune and chromaticity calculations
//   3.  IQHC & IQVC         = tune trim power supplies
//   4.  ISH & ISV           = chrom. sextupoles
//   5.  ISEBC8F8 & ISEBB4E4 = drive sextupoles for 13/3 resonance
//   6.  D03kick             = D3 thin septum
//   7.  IC7, ID1,ID2, ID4, ID6, ID7, IE1  = for D3/D6 orbit bump
//            call file = BOOSTER.BMP to use these
//   8.  BDOT
//
// Lines which can be used:
//  BOOSTER
//  B_D3 
//  D3toD6
// 
// 10/01 - KAB
//===================================================================
//------------Physical costants---------------------
  CONV=0.0254;         //meter per inch
//  E0  = 0.938272310;   //proton mass [GeV]
  C   = 2.99792458e8;  //speed of light [m/sec]
//---------------------------------------------------
//------------Basic Relationships---------------------
//  EE    := EK + E0;
//  PC    := sqrt(EE*EE - E0*E0);
//  GAMMA := EE/E0;
//  BETA  := sqrt(1.-1./(GAMMA*GAMMA));
//---------------------------------------------------
// set default values, injection bare machine
IDIPO:= 640. ;
BDOT := 0.   ;
IQHC   := 0. ;
IQVC   := 0. ;
IQHBD  := 3.4 ;   // value based on 1992/3 data
IQVBD  := 4.8 ;   // value based on 1992/3 data
CBRHO  := 0.0 ;
ISH    := 0.  ;
ISV    := 0.  ;
ISEBC8F8:= 0. ;
ISEBB4E4:= 0. ;
D03kick:=0.   ;
ANGD6  :=0.   ;
//
IQVTB5   := 0.;
IQVTB7   := 0.;
IQVTC1   := 0.;
IQVTC3   := 0.;
IQVTC5   := 0.;
IQVTC7   := 0.;
IQVTD1   := 0.;
IQVTD3   := 0.;
IQHTB6   := 0.;
IQHTB8   := 0.;
IQHTC2   := 0.;
IQHTC4   := 0.;
IQHTC6   := 0.;
IQHTC8   := 0.;
IQHTD2   := 0.;
IQHTD4   := 0.;
//
// 1/2 integer stop band correctors
QVSTR1 := 0.;
QHSTR1 := 0.;
QVSTR2 := 0.;
QHSTR2 := 0.;
//
// Dipole parameters
//
LEND = 2.42;
//
//ANGD  CONSTANT= 0.174533;
// a little more precise (it is 10 degrees, after all) - kab
ANGD = 0.174532925;
RHO := LEND/ANGD;
IDIPO2 := IDIPO*IDIPO;
IDIPO3 := IDIPO*IDIPO*IDIPO;
IDIPO4 := IDIPO*IDIPO*IDIPO*IDIPO;
IDIPO5 := IDIPO*IDIPO*IDIPO*IDIPO*IDIPO;
IDIPO6 := IDIPO*IDIPO*IDIPO*IDIPO*IDIPO*IDIPO;
IDIPO7 := IDIPO*IDIPO*IDIPO*IDIPO*IDIPO*IDIPO*IDIPO;
IDIPO8 := IDIPO*IDIPO*IDIPO*IDIPO*IDIPO*IDIPO*IDIPO*IDIPO;
// use expansion to include saturation
BDIPO := 0.0009122+ idipo*2.371E-4+ idipo2*1.717E-8
         -idipo3*2.412E-11 +idipo4*1.836e-14- idipo5*7.88e-18
         +idipo6*1.891e-21 -idipo7*2.351e-25+ idipo8*1.163e-29;
BRHO := BDIPO*RHO-CBRHO*BDOT;
//
// Bend
//
//K10:= -2.E-3/RHO;
//K10:= -3.918E-3/RHO;   //6/20/91 from R.Thern Tech Note 190
// 8th order fit to data in tech note 190
K10:= (-0.003571-IDIPO*2.52e-6+IDIPO2*6.145e-09-IDIPO3*7.113e-12+
        IDIPO4*4.531e-15-IDIPO5*1.666e-18+IDIPO6*3.523e-22-      
        IDIPO7*3.972e-26+IDIPO8*1.847e-30)/RHO;
//value, K10;
SBDOT = 0.;
//K20:= -0.4438/RHO;     //6/20/91 from R.Thern Tech Note 190
K20:= (-0.4438+0.31764*SBDOT)/RHO;   //MMB 6/20/91 from R.Thern Tech Note 190 and SYL TN 147
//value, K20;
//
// Quadrupoles
//
//CK1: CONSTANT = 8.616694e-4;
CKC = 0.20022;    //quad trim coil vs. main coil
//
// To match change in power supply response to back emf due to bdot we add
// a bdot term, with a calibration coefficient
IQH   := IDIPO + CKC*(IQHC + BDOT*IQHBD);
IQV   := IDIPO + CKC*(IQVC + BDOT*IQVBD);
//
// old lengths
//LENQH: CONSTANT = 0.493;
//LENQV: CONSTANT = 0.504;
// lengths corrected for saturation fit to values in E.Bleser Report
//LENQH:= 1.0*(0.4998-IQH*1.569e-05+IQH*IQH*7.900e-09-IQH*IQH*IQH*1.215e-12);
//LENQV:= 1.0*(0.5125-IQV*1.946e-05+IQV*IQV*9.609e-09-IQV*IQV*IQV*1.404e-12);
//
// lengths corrected using fit to Wuzeng Meng quadrupole models
LENQHC:= 1.0*(0.4974+IQH*4.863e-08+IQH*IQH*1.539e-11-IQH*IQH*IQH*1.166e-13);
LENQVC:= 1.0*(0.5091-IQV*9.765e-08+IQV*IQV*1.049e-10-IQV*IQV*IQV*1.336e-13);
// of course we need to adjust the drifts on either side to keep Circ. Constant
//LVUS:=(0.504-LENQV)/2;
//LVDS:=(0.504-LENQV)/2;
//LHUS:=(0.493-LENQH)/2;
//LHDS:=(0.493-LENQH)/2;

// adjusting the lengths is actually a bad idea. Taking out the length correction
// actually gives good agreement with measurements. 9/16/08 kab
LVUS:=0.0;
LVDS:=0.0;
LHUS:=0.0;
LHDS:=0.0;
//
LENQH := 0.493;
LENQV := 0.504;

//-------------------------------------------------------- 
// MODIFICATIONS oct 1992 BY AUL FOR NONLINEAR EFFECTS 
//
// quad integrated gradient in tesla. This is a linear aproximation valid
// in the range 600-800 amps. See file luccio/mad_spline.dat --- old stuff; kab
//
// New stuff: 10/18/01 Kevin Brown
//  added effective length as a function of current (see LENQH & V above)
//   effective length was never measured, so we had to use Opera3D model to calculate
//  added 5th order polynomial to include saturation effects.
//   for shorts this was fudged by 0.9996 to match real data
//   for longs this was fudged by 1.0024 to match real data
//  added BDot dependence based on Opera2D transient model, adjusted to match 
//  real data.
//
// New stuff: 9/16/08 Kevin Brown
//   removed the effective length correction. Not a good idea, actually (redundant).
//   The main insight from 2001 is the BDot dependence was due to a power supply
//   back emf effect. This remains valid in the model, but depends on power supplies
//   responding the same as they have in the past. 
//
//  short quads ( current in amps )
// 5th order, match to field measurements
//
B1LH  := (0.001818+(IQH*9.080e-4)+(IQH*IQH*6.657e-9)-
         (IQH*IQH*IQH*7.225e-12)+                    
         (IQH*IQH*IQH*IQH*3.239e-15)-                
         (IQH*IQH*IQH*IQH*IQH*5.07e-19));
B1LHo := IQH*9.121e-4;
//
// for 2D transient model, coeff. is 5e-5
//CKH := (1-0.00005*BDOT/BDIPO)*1.00*B1LH/(BRHO*LENQH);
// for 3D transient model
CKH := (1-0.00004179*(BDOT/BDIPO))*1.00*B1LH/(BRHO*LENQH);
// fit to experimental data, Note sign change //
// 0.00013;
//CKH := (1+0.0001313*BDOT/BDIPO)*1.00*B1LH/(BRHO*LENQH);
//
//  long quads ( current in amps )
// 5th order, match to field measurements
//
B1LV  := (0.002099+(IQV*9.257e-4)+(IQV*IQV*1.164e-8)- 
         (IQV*IQV*IQV*1.046e-11)+                     
         (IQV*IQV*IQV*IQV*4.057e-15)-                
         (IQV*IQV*IQV*IQV*IQV*5.75e-19));
B1LVo := IQV*9.325e-4;
//
// for 2D transient model, coeff. is 5e-5
//CKV   := -(1-0.00005*BDOT/BDIPO)*1.00*B1LV/(BRHO*LENQV);
// for 3D transient model
CKV   := -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LV/(BRHO*LENQV);
CKVear := -(1-0.000062913*(BDOT/BDIPO))*1.0030*B1LV/(BRHO*LENQV);
//
// Stop band correctors are configured as follows per Booster TN149
// and AGS TN 465
//  4 power supplies for 1/2 integer to 2 turns on main quadrupoles
//  p.s. 1 QVSTR1 = +A1, +A7, -B1, -B7, ...
//  p.s. 2 QHSTR1 = +A2, +A8, -B2, -B8, ...
//  p.s. 3 QVSTR2 = +A3, -A5, -B3, +B5, ...
//  p.s. 4 QHSTR2 = +A4, -A6, -B4, +B6, ...
//
// IQVT and IQHT are trims for pol. proton test, small beta at C5 foil 7/6/07 KAB
//
// small trim coils are 2 turns
ckc2 = 0.4;

IQVA1   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*( QVSTR1);
IQVA3   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*( QVSTR2);
IQVA5   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*(-QVSTR2);
IQVA7   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*( QVSTR1);
IQVB1   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*(-QVSTR1);
IQVB3   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*(-QVSTR2);
IQVB5   := IDIPO + CKC*(IQVC + IQVTB5 + BDOT*IQVBD) + ckc2*( QVSTR2);
IQVB7   := IDIPO + CKC*(IQVC + IQVTB7 + BDOT*IQVBD) + ckc2*(-QVSTR1);
IQVC1   := IDIPO + CKC*(IQVC + IQVTC1 + BDOT*IQVBD) + ckc2*( QVSTR1);
IQVC3   := IDIPO + CKC*(IQVC + IQVTC3 + BDOT*IQVBD) + ckc2*( QVSTR2);
IQVC5   := IDIPO + CKC*(IQVC + IQVTC5 + BDOT*IQVBD) + ckc2*(-QVSTR2);
IQVC7   := IDIPO + CKC*(IQVC + IQVTC7 + BDOT*IQVBD) + ckc2*( QVSTR1);
IQVD1   := IDIPO + CKC*(IQVC + IQVTD1 + BDOT*IQVBD) + ckc2*(-QVSTR1);
IQVD3   := IDIPO + CKC*(IQVC + IQVTD3 + BDOT*IQVBD) + ckc2*(-QVSTR2);
IQVD5   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*( QVSTR2);
IQVD7   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*(-QVSTR1);
IQVE1   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*( QVSTR1);
IQVE3   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*( QVSTR2);
IQVE5   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*(-QVSTR2);
IQVE7   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*( QVSTR1);
IQVF1   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*(-QVSTR1);
IQVF3   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*(-QVSTR2);
IQVF5   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*( QVSTR2);
IQVF7   := IDIPO + CKC*(IQVC + BDOT*IQVBD) + ckc2*(-QVSTR1);

IQHA2   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*( QHSTR1);
IQHA4   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*( QHSTR2);
IQHA6   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*(-QHSTR2);
IQHA8   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*( QHSTR1);
IQHB2   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*(-QHSTR1);
IQHB4   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*(-QHSTR2);
IQHB6   := IDIPO + CKC*(IQHC + IQHTB6 + BDOT*IQHBD) + ckc2*( QHSTR2);
IQHB8   := IDIPO + CKC*(IQHC + IQHTB8 + BDOT*IQHBD) + ckc2*(-QHSTR1);
IQHC2   := IDIPO + CKC*(IQHC + IQHTC2 + BDOT*IQHBD) + ckc2*( QHSTR1);
IQHC4   := IDIPO + CKC*(IQHC + IQHTC4 + BDOT*IQHBD) + ckc2*( QHSTR2);
IQHC6   := IDIPO + CKC*(IQHC + IQHTC6 + BDOT*IQHBD) + ckc2*(-QHSTR2);
IQHC8   := IDIPO + CKC*(IQHC + IQHTC8 + BDOT*IQHBD) + ckc2*( QHSTR1);
IQHD2   := IDIPO + CKC*(IQHC + IQHTD2 + BDOT*IQHBD) + ckc2*(-QHSTR1);
IQHD4   := IDIPO + CKC*(IQHC + IQHTD4 + BDOT*IQHBD) + ckc2*(-QHSTR2);
IQHD6   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*( QHSTR2);
IQHD8   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*(-QHSTR1);
IQHE2   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*( QHSTR1);
IQHE4   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*( QHSTR2);
IQHE6   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*(-QHSTR2);
IQHE8   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*( QHSTR1);
IQHF2   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*(-QHSTR1);
IQHF4   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*(-QHSTR2);
IQHF6   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*( QHSTR2);
IQHF8   := IDIPO + CKC*(IQHC + BDOT*IQHBD) + ckc2*(-QHSTR1);

B1LVA1  := (0.002099+(IQVA1*9.257e-4)+(IQVA1*IQVA1*1.164e-8)-
         (IQVA1*IQVA1*IQVA1*1.046e-11)+                     
         (IQVA1*IQVA1*IQVA1*IQVA1*4.057e-15)-               
         (IQVA1*IQVA1*IQVA1*IQVA1*IQVA1*5.75e-19));
B1LVA3  := (0.002099+(IQVA3*9.257e-4)+(IQVA3*IQVA3*1.164e-8)-
         (IQVA3*IQVA3*IQVA3*1.046e-11)+                     
         (IQVA3*IQVA3*IQVA3*IQVA3*4.057e-15)-               
         (IQVA3*IQVA3*IQVA3*IQVA3*IQVA3*5.75e-19));
B1LVA5  := (0.002099+(IQVA5*9.257e-4)+(IQVA5*IQVA5*1.164e-8)- 
         (IQVA5*IQVA5*IQVA5*1.046e-11)+                     
         (IQVA5*IQVA5*IQVA5*IQVA5*4.057e-15)-                
         (IQVA5*IQVA5*IQVA5*IQVA5*IQVA5*5.75e-19));
B1LVA7  := (0.002099+(IQVA7*9.257e-4)+(IQVA7*IQVA7*1.164e-8)- 
         (IQVA7*IQVA7*IQVA7*1.046e-11)+                     
         (IQVA7*IQVA7*IQVA7*IQVA7*4.057e-15)-                
         (IQVA7*IQVA7*IQVA7*IQVA7*IQVA7*5.75e-19));
B1LVB1  := (0.002099+(IQVB1*9.257e-4)+(IQVB1*IQVB1*1.164e-8)- 
         (IQVB1*IQVB1*IQVB1*1.046e-11)+                     
         (IQVB1*IQVB1*IQVB1*IQVB1*4.057e-15)-                
         (IQVB1*IQVB1*IQVB1*IQVB1*IQVB1*5.75e-19));
B1LVB3  := (0.002099+(IQVB3*9.257e-4)+(IQVB3*IQVB3*1.164e-8)- 
         (IQVB3*IQVB3*IQVB3*1.046e-11)+                     
         (IQVB3*IQVB3*IQVB3*IQVB3*4.057e-15)-                
         (IQVB3*IQVB3*IQVB3*IQVB3*IQVB3*5.75e-19));
B1LVB5  := (0.002099+(IQVB5*9.257e-4)+(IQVB5*IQVB5*1.164e-8)- 
         (IQVB5*IQVB5*IQVB5*1.046e-11)+                     
         (IQVB5*IQVB5*IQVB5*IQVB5*4.057e-15)-                
         (IQVB5*IQVB5*IQVB5*IQVB5*IQVB5*5.75e-19));
B1LVB7  := (0.002099+(IQVB7*9.257e-4)+(IQVB7*IQVB7*1.164e-8)- 
         (IQVB7*IQVB7*IQVB7*1.046e-11)+                     
         (IQVB7*IQVB7*IQVB7*IQVB7*4.057e-15)-                
         (IQVB7*IQVB7*IQVB7*IQVB7*IQVB7*5.75e-19));
B1LVC1  := (0.002099+(IQVC1*9.257e-4)+(IQVC1*IQVC1*1.164e-8)- 
         (IQVC1*IQVC1*IQVC1*1.046e-11)+                     
         (IQVC1*IQVC1*IQVC1*IQVC1*4.057e-15)-                
         (IQVC1*IQVC1*IQVC1*IQVC1*IQVC1*5.75e-19));
B1LVC3  := (0.002099+(IQVC3*9.257e-4)+(IQVC3*IQVC3*1.164e-8)- 
         (IQVC3*IQVC3*IQVC3*1.046e-11)+                     
         (IQVC3*IQVC3*IQVC3*IQVC3*4.057e-15)-                
         (IQVC3*IQVC3*IQVC3*IQVC3*IQVC3*5.75e-19));
B1LVC5  := (0.002099+(IQVC5*9.257e-4)+(IQVC5*IQVC5*1.164e-8)- 
         (IQVC5*IQVC5*IQVC5*1.046e-11)+                     
         (IQVC5*IQVC5*IQVC5*IQVC5*4.057e-15)-                
         (IQVC5*IQVC5*IQVC5*IQVC5*IQVC5*5.75e-19));
B1LVC7  := (0.002099+(IQVC7*9.257e-4)+(IQVC7*IQVC7*1.164e-8)- 
         (IQVC7*IQVC7*IQVC7*1.046e-11)+                     
         (IQVC7*IQVC7*IQVC7*IQVC7*4.057e-15)-                
         (IQVC7*IQVC7*IQVC7*IQVC7*IQVC7*5.75e-19));
B1LVD1  := (0.002099+(IQVD1*9.257e-4)+(IQVD1*IQVD1*1.164e-8)- 
         (IQVD1*IQVD1*IQVD1*1.046e-11)+                     
         (IQVD1*IQVD1*IQVD1*IQVD1*4.057e-15)-                
         (IQVD1*IQVD1*IQVD1*IQVD1*IQVD1*5.75e-19));
B1LVD3  := (0.002099+(IQVD3*9.257e-4)+(IQVD3*IQVD3*1.164e-8)- 
         (IQVD3*IQVD3*IQVD3*1.046e-11)+                     
         (IQVD3*IQVD3*IQVD3*IQVD3*4.057e-15)-                
         (IQVD3*IQVD3*IQVD3*IQVD3*IQVD3*5.75e-19));
B1LVD5  := (0.002099+(IQVD5*9.257e-4)+(IQVD5*IQVD5*1.164e-8)- 
         (IQVD5*IQVD5*IQVD5*1.046e-11)+                     
         (IQVD5*IQVD5*IQVD5*IQVD5*4.057e-15)-                
         (IQVD5*IQVD5*IQVD5*IQVD5*IQVD5*5.75e-19));
B1LVD7  := (0.002099+(IQVD7*9.257e-4)+(IQVD7*IQVD7*1.164e-8)- 
         (IQVD7*IQVD7*IQVD7*1.046e-11)+                     
         (IQVD7*IQVD7*IQVD7*IQVD7*4.057e-15)-                
         (IQVD7*IQVD7*IQVD7*IQVD7*IQVD7*5.75e-19));
B1LVE1  := (0.002099+(IQVE1*9.257e-4)+(IQVE1*IQVE1*1.164e-8)- 
         (IQVE1*IQVE1*IQVE1*1.046e-11)+                     
         (IQVE1*IQVE1*IQVE1*IQVE1*4.057e-15)-                
         (IQVE1*IQVE1*IQVE1*IQVE1*IQVE1*5.75e-19));
B1LVE3  := (0.002099+(IQVE3*9.257e-4)+(IQVE3*IQVE3*1.164e-8)- 
         (IQVE3*IQVE3*IQVE3*1.046e-11)+                     
         (IQVE3*IQVE3*IQVE3*IQVE3*4.057e-15)-                
         (IQVE3*IQVE3*IQVE3*IQVE3*IQVE3*5.75e-19));
B1LVE5  := (0.002099+(IQVE5*9.257e-4)+(IQVE5*IQVE5*1.164e-8)- 
         (IQVE5*IQVE5*IQVE5*1.046e-11)+                     
         (IQVE5*IQVE5*IQVE5*IQVE5*4.057e-15)-                
         (IQVE5*IQVE5*IQVE5*IQVE5*IQVE5*5.75e-19));
B1LVE7  := (0.002099+(IQVE7*9.257e-4)+(IQVE7*IQVE7*1.164e-8)- 
         (IQVE7*IQVE7*IQVE7*1.046e-11)+                     
         (IQVE7*IQVE7*IQVE7*IQVE7*4.057e-15)-                
         (IQVE7*IQVE7*IQVE7*IQVE7*IQVE7*5.75e-19));
B1LVF1  := (0.002099+(IQVF1*9.257e-4)+(IQVF1*IQVF1*1.164e-8)- 
         (IQVF1*IQVF1*IQVF1*1.046e-11)+                     
         (IQVF1*IQVF1*IQVF1*IQVF1*4.057e-15)-                
         (IQVF1*IQVF1*IQVF1*IQVF1*IQVF1*5.75e-19));
B1LVF3  := (0.002099+(IQVF3*9.257e-4)+(IQVF3*IQVF3*1.164e-8)- 
         (IQVF3*IQVF3*IQVF3*1.046e-11)+                     
         (IQVF3*IQVF3*IQVF3*IQVF3*4.057e-15)-                
         (IQVF3*IQVF3*IQVF3*IQVF3*IQVF3*5.75e-19));
B1LVF5  := (0.002099+(IQVF5*9.257e-4)+(IQVF5*IQVF5*1.164e-8)- 
         (IQVF5*IQVF5*IQVF5*1.046e-11)+                     
         (IQVF5*IQVF5*IQVF5*IQVF5*4.057e-15)-                
         (IQVF5*IQVF5*IQVF5*IQVF5*IQVF5*5.75e-19));
B1LVF7  := (0.002099+(IQVF7*9.257e-4)+(IQVF7*IQVF7*1.164e-8)- 
         (IQVF7*IQVF7*IQVF7*1.046e-11)+                     
         (IQVF7*IQVF7*IQVF7*IQVF7*4.057e-15)-                
         (IQVF7*IQVF7*IQVF7*IQVF7*IQVF7*5.75e-19));

B1LHA2  := (0.001818+(IQHA2*9.080e-4)+(IQHA2*IQHA2*6.657e-9)- 
         (IQHA2*IQHA2*IQHA2*7.225e-12)+                     
         (IQHA2*IQHA2*IQHA2*IQHA2*3.239e-15)-                
         (IQHA2*IQHA2*IQHA2*IQHA2*IQHA2*5.07e-19));
B1LHA4  := (0.001818+(IQHA4*9.080e-4)+(IQHA4*IQHA4*6.657e-9)- 
         (IQHA4*IQHA4*IQHA4*7.225e-12)+                     
         (IQHA4*IQHA4*IQHA4*IQHA4*3.239e-15)-                
         (IQHA4*IQHA4*IQHA4*IQHA4*IQHA4*5.07e-19));
B1LHA6  := (0.001818+(IQHA6*9.080e-4)+(IQHA6*IQHA6*6.657e-9)- 
         (IQHA6*IQHA6*IQHA6*7.225e-12)+                     
         (IQHA6*IQHA6*IQHA6*IQHA6*3.239e-15)-                
         (IQHA6*IQHA6*IQHA6*IQHA6*IQHA6*5.07e-19));
B1LHA8  := (0.001818+(IQHA8*9.080e-4)+(IQHA8*IQHA8*6.657e-9)- 
         (IQHA8*IQHA8*IQHA8*7.225e-12)+                     
         (IQHA8*IQHA8*IQHA8*IQHA8*3.239e-15)-                
         (IQHA8*IQHA8*IQHA8*IQHA8*IQHA8*5.07e-19));
B1LHB2  := (0.001818+(IQHB2*9.080e-4)+(IQHB2*IQHB2*6.657e-9)- 
         (IQHB2*IQHB2*IQHB2*7.225e-12)+                     
         (IQHB2*IQHB2*IQHB2*IQHB2*3.239e-15)-                
         (IQHB2*IQHB2*IQHB2*IQHB2*IQHB2*5.07e-19));
B1LHB4  := (0.001818+(IQHB4*9.080e-4)+(IQHB4*IQHB4*6.657e-9)- 
         (IQHB4*IQHB4*IQHB4*7.225e-12)+                     
         (IQHB4*IQHB4*IQHB4*IQHB4*3.239e-15)-                
         (IQHB4*IQHB4*IQHB4*IQHB4*IQHB4*5.07e-19));
B1LHB6  := (0.001818+(IQHB6*9.080e-4)+(IQHB6*IQHB6*6.657e-9)- 
         (IQHB6*IQHB6*IQHB6*7.225e-12)+                     
         (IQHB6*IQHB6*IQHB6*IQHB6*3.239e-15)-                
         (IQHB6*IQHB6*IQHB6*IQHB6*IQHB6*5.07e-19));
B1LHB8  := (0.001818+(IQHB8*9.080e-4)+(IQHB8*IQHB8*6.657e-9)- 
         (IQHB8*IQHB8*IQHB8*7.225e-12)+                     
         (IQHB8*IQHB8*IQHB8*IQHB8*3.239e-15)-                
         (IQHB8*IQHB8*IQHB8*IQHB8*IQHB8*5.07e-19));
B1LHC2  := (0.001818+(IQHC2*9.080e-4)+(IQHC2*IQHC2*6.657e-9)- 
         (IQHC2*IQHC2*IQHC2*7.225e-12)+                     
         (IQHC2*IQHC2*IQHC2*IQHC2*3.239e-15)-                
         (IQHC2*IQHC2*IQHC2*IQHC2*IQHC2*5.07e-19));
B1LHC4  := (0.001818+(IQHC4*9.080e-4)+(IQHC4*IQHC4*6.657e-9)- 
         (IQHC4*IQHC4*IQHC4*7.225e-12)+                     
         (IQHC4*IQHC4*IQHC4*IQHC4*3.239e-15)-                
         (IQHC4*IQHC4*IQHC4*IQHC4*IQHC4*5.07e-19));
B1LHC6  := (0.001818+(IQHC6*9.080e-4)+(IQHC6*IQHC6*6.657e-9)- 
         (IQHC6*IQHC6*IQHC6*7.225e-12)+                     
         (IQHC6*IQHC6*IQHC6*IQHC6*3.239e-15)-                
         (IQHC6*IQHC6*IQHC6*IQHC6*IQHC6*5.07e-19));
B1LHC8  := (0.001818+(IQHC8*9.080e-4)+(IQHC8*IQHC8*6.657e-9)- 
         (IQHC8*IQHC8*IQHC8*7.225e-12)+                     
         (IQHC8*IQHC8*IQHC8*IQHC8*3.239e-15)-                
         (IQHC8*IQHC8*IQHC8*IQHC8*IQHC8*5.07e-19));
B1LHD2  := (0.001818+(IQHD2*9.080e-4)+(IQHD2*IQHD2*6.657e-9)- 
         (IQHD2*IQHD2*IQHD2*7.225e-12)+                     
         (IQHD2*IQHD2*IQHD2*IQHD2*3.239e-15)-                
         (IQHD2*IQHD2*IQHD2*IQHD2*IQHD2*5.07e-19));
B1LHD4  := (0.001818+(IQHD4*9.080e-4)+(IQHD4*IQHD4*6.657e-9)- 
         (IQHD4*IQHD4*IQHD4*7.225e-12)+                     
         (IQHD4*IQHD4*IQHD4*IQHD4*3.239e-15)-                
         (IQHD4*IQHD4*IQHD4*IQHD4*IQHD4*5.07e-19));
B1LHD6  := (0.001818+(IQHD6*9.080e-4)+(IQHD6*IQHD6*6.657e-9)- 
         (IQHD6*IQHD6*IQHD6*7.225e-12)+                     
         (IQHD6*IQHD6*IQHD6*IQHD6*3.239e-15)-                
         (IQHD6*IQHD6*IQHD6*IQHD6*IQHD6*5.07e-19));
B1LHD8  := (0.001818+(IQHD8*9.080e-4)+(IQHD8*IQHD8*6.657e-9)- 
         (IQHD8*IQHD8*IQHD8*7.225e-12)+                     
         (IQHD8*IQHD8*IQHD8*IQHD8*3.239e-15)-                
         (IQHD8*IQHD8*IQHD8*IQHD8*IQHD8*5.07e-19));
B1LHE2  := (0.001818+(IQHE2*9.080e-4)+(IQHE2*IQHE2*6.657e-9)- 
         (IQHE2*IQHE2*IQHE2*7.225e-12)+                     
         (IQHE2*IQHE2*IQHE2*IQHE2*3.239e-15)-                
         (IQHE2*IQHE2*IQHE2*IQHE2*IQHE2*5.07e-19));
B1LHE4  := (0.001818+(IQHE4*9.080e-4)+(IQHE4*IQHE4*6.657e-9)- 
         (IQHE4*IQHE4*IQHE4*7.225e-12)+                     
         (IQHE4*IQHE4*IQHE4*IQHE4*3.239e-15)-                
         (IQHE4*IQHE4*IQHE4*IQHE4*IQHE4*5.07e-19));
B1LHE6  := (0.001818+(IQHE6*9.080e-4)+(IQHE6*IQHE6*6.657e-9)- 
         (IQHE6*IQHE6*IQHE6*7.225e-12)+                     
         (IQHE6*IQHE6*IQHE6*IQHE6*3.239e-15)-                
         (IQHE6*IQHE6*IQHE6*IQHE6*IQHE6*5.07e-19));
B1LHE8  := (0.001818+(IQHE8*9.080e-4)+(IQHE8*IQHE8*6.657e-9)- 
         (IQHE8*IQHE8*IQHE8*7.225e-12)+                     
         (IQHE8*IQHE8*IQHE8*IQHE8*3.239e-15)-                
         (IQHE8*IQHE8*IQHE8*IQHE8*IQHE8*5.07e-19));
B1LHF2  := (0.001818+(IQHF2*9.080e-4)+(IQHF2*IQHF2*6.657e-9)- 
         (IQHF2*IQHF2*IQHF2*7.225e-12)+                     
         (IQHF2*IQHF2*IQHF2*IQHF2*3.239e-15)-                
         (IQHF2*IQHF2*IQHF2*IQHF2*IQHF2*5.07e-19));
B1LHF4  := (0.001818+(IQHF4*9.080e-4)+(IQHF4*IQHF4*6.657e-9)- 
         (IQHF4*IQHF4*IQHF4*7.225e-12)+                     
         (IQHF4*IQHF4*IQHF4*IQHF4*3.239e-15)-                
         (IQHF4*IQHF4*IQHF4*IQHF4*IQHF4*5.07e-19));
B1LHF6  := (0.001818+(IQHF6*9.080e-4)+(IQHF6*IQHF6*6.657e-9)- 
         (IQHF6*IQHF6*IQHF6*7.225e-12)+                     
         (IQHF6*IQHF6*IQHF6*IQHF6*3.239e-15)-                
         (IQHF6*IQHF6*IQHF6*IQHF6*IQHF6*5.07e-19));
B1LHF8  := (0.001818+(IQHF8*9.080e-4)+(IQHF8*IQHF8*6.657e-9)- 
         (IQHF8*IQHF8*IQHF8*7.225e-12)+                     
         (IQHF8*IQHF8*IQHF8*IQHF8*3.239e-15)-                
         (IQHF8*IQHF8*IQHF8*IQHF8*IQHF8*5.07e-19));

CKVTA1:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVA1/(BRHO*LENQV);
CKVTA3:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVA3/(BRHO*LENQV);
CKVTA5:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVA5/(BRHO*LENQV);
CKVTA7:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVA7/(BRHO*LENQV);
CKVTB1:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVB1/(BRHO*LENQV);
CKVTB3:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVB3/(BRHO*LENQV);
CKVTB5:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVB5/(BRHO*LENQV);
CKVTB7:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVB7/(BRHO*LENQV);
CKVTC1:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVC1/(BRHO*LENQV);
CKVTC3:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVC3/(BRHO*LENQV);
CKVTC5:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVC5/(BRHO*LENQV);
CKVTC7:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVC7/(BRHO*LENQV);
CKVTD1:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVD1/(BRHO*LENQV);
CKVTD3:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVD3/(BRHO*LENQV);
CKVTD5:= -(1-0.000062913*(BDOT/BDIPO))*1.0030*B1LVD5/(BRHO*LENQV) ;// Ear Chamber
CKVTD7:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVD7/(BRHO*LENQV);
CKVTE1:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVE1/(BRHO*LENQV);
CKVTE3:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVE3/(BRHO*LENQV);
CKVTE5:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVE5/(BRHO*LENQV);
CKVTE7:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVE7/(BRHO*LENQV);
CKVTF1:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVF1/(BRHO*LENQV);
CKVTF3:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVF3/(BRHO*LENQV);
CKVTF5:= -(1-0.000062913*(BDOT/BDIPO))*1.0030*B1LVF5/(BRHO*LENQV) ;// Ear Chamber
CKVTF7:= -(1-0.000041942*(BDOT/BDIPO))*1.0030*B1LVF7/(BRHO*LENQV);

CKHTA2:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHA2/(BRHO*LENQH);
CKHTA4:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHA4/(BRHO*LENQH);
CKHTA6:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHA6/(BRHO*LENQH);
CKHTA8:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHA8/(BRHO*LENQH);
CKHTB2:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHB2/(BRHO*LENQH);
CKHTB4:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHB4/(BRHO*LENQH);
CKHTB6:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHB6/(BRHO*LENQH);
CKHTB8:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHB8/(BRHO*LENQH);
CKHTC2:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHC2/(BRHO*LENQH);
CKHTC4:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHC4/(BRHO*LENQH);
CKHTC6:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHC6/(BRHO*LENQH);
CKHTC8:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHC8/(BRHO*LENQH);
CKHTD2:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHD2/(BRHO*LENQH);
CKHTD4:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHD4/(BRHO*LENQH);
CKHTD6:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHD6/(BRHO*LENQH);
CKHTD8:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHD8/(BRHO*LENQH);
CKHTE2:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHE2/(BRHO*LENQH);
CKHTE4:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHE4/(BRHO*LENQH);
CKHTE6:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHE6/(BRHO*LENQH);
CKHTE8:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHE8/(BRHO*LENQH);
CKHTF2:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHF2/(BRHO*LENQH);
CKHTF4:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHF4/(BRHO*LENQH);
CKHTF6:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHF6/(BRHO*LENQH);
CKHTF8:= (1-0.00004179*(BDOT/BDIPO))*1.00*B1LHF8/(BRHO*LENQH);

// fit to experimental data, Note sign change //
// 0.00019
//CKV   := -(1+0.0001318*(BDOT/BDIPO))*1.0030*B1LV/(BRHO*LENQV);
//CKVear := -(1+0.00095*(BDOT/BDIPO))*1.0030*B1LV/(BRHO*LENQV);
//-------------------------------------------------------- 
// 
// Sextupoles
//
LENS = 0.1;
//LENS: CONSTANT = 0.0631;         //E.Bleser Tech Note # 182
SCON:= 0.013144/(LENS*BRHO);       //E.Bleser Tech Note # 182
K2SH:= SCON ;
K2SV:= -SCON ;
//
//
// Bumps
//
S1:= 0        ;            // horizontal slow injection bump 
//
T1_DHC4:= S1*(-0.12798448)*X/ANGD;
T1_DHC8:= S1*(-0.011850274)*X/ANGD;
T1_DHD1:= S1*(-0.13939141)*X/ANGD;
//VALUE, T1_DHC4;
//VALUE, T1_DHC8;
//VALUE, T1_DHD1;
//
S2:= 0           ;         // horizontal fast injection 3-bump
T2_KHC3:= S2*0.14459278*X;
T2_KHC7:= S2*0.016421456*X;
T2_KHD1:= S2*0.12814203*X;
//
S3:= 0           ;         // horizontal slow fine injection
T3_DHCC2:= S3*(0.16940561*X -0.93606722*XP);
T3_DHCC4:= S3*(-0.029924389*X +0.70499849*XP);
T3_DHCC6:= S3*(0.10427119*X -0.96937346*XP);
T3_DHCC8:= S3*(0.090955891*X +0.026715931*XP);
//
S4:= 0           ;         // vertical aperture scan on QVA3
T4_DVCA1:= S4*0.088223659*Y;
T4_DVCA3:= S4*(-0.064612977)*Y;
T4_DVCA5:= S4*0.088223659*Y;
//
S5:= 0           ;         // horizontal aperture scan on QHA4
T5_DHCA2:= S5*0.088559799*X;
T5_DHCA4:= S5*(-0.064121939)*X;
T5_DHCA6:= S5*0.089833096*X;
//
S6:= 0           ;         // vertical slow fine injection
T6_DVCC3:= S6*(0.074244805*Y +0.30190152*YP);
T6_DVCC5:= S6*(0.12507899*Y -0.71429497*YP);
T6_DVCC7:= S6*(-0.057183515*Y +0.66310227*YP);
T6_DVCD1:= S6*(0.17945427*Y -0.49318850*YP);
//
S7:= 0           ;         // horizontal fast injection 4-bump
T7_KHC1:= S7*(0.20363538*X -1.4652994*XP);
T7_KHC3:= S7*(0.14961341*X -0.036126863*XP);
T7_KHC7:= S7*(0.23095290*X -1.5437044*XP);
T7_KHD1:= S7*(0.029793601*X +0.70768589*XP);
//VALUE, T7_KHC1;
//VALUE, T7_KHC3;
//VALUE, T7_KHC7;
//VALUE, T7_KHD1;
//
S14:= 0          ;         // vertical 3-bump aperture scan
T14_VCA5:= S14*( 0.88254191E-01*Y);
T14_VCA7:= S14*(-0.64375877E-01*Y);
T14_VCB1:= S14*( 0.88289112E-01*Y);
//VALUE, T14_VCA5;
//VALUE, T14_VCA7;
//VALUE, T14_VCB1;
//
S16:= 0          ;         // heavy ion injection 4-bump kicker
//T16_KHC1:= S16*(0.21134847*X -0.46877363*XP);
//T16_KHC3:= S16*(-0.15696232*X +1.3481443*XP);
//T16_KHC7:= S16*(0.20529373*X -0.34596553*XP);
//T16_KHD1:= S16*(-0.24505234*X +1.4316916*XP);
T16_KHC1:= S16*(0.22255889*X -0.61358076*XP);    //1/21/92 for Q=4.8,4.8
T16_KHC3:= S16*(-0.15043682*X +1.4147446*XP);    //1/21/92 for Q=4.8,4.8
T16_KHC7:= S16*(0.19047807*X -0.31069359*XP);    //1/21/92 for Q=4.8,4.8
T16_KHD1:= S16*(-0.24505234*X +1.5589644*XP);    //1/21/92 for Q=4.8,4.8
//
S17:= 0          ;         // horizontal 3-bump extraction  TDH
T17_DHF2:= S17*0.12245361E+00*X;
T17_DHF4:= S17*0.74039027E-02*X;
T17_DHF7:= S17*0.13890560E+00*X;
//
S18:= 0          ;         // horizontal 4-bump extraction  TDH
T18_DHF2:= S18*(-0.10721114*X -0.11093005E+01*XP);
T18_DHF4:= S18*(0.20383906*X +0.94879878*XP);
T18_DHF7:= S18*(-0.10602628*X -0.11830419E+01*XP);
T18_DHA1:= S18*(0.23878516*X  +0.11533529E+01*XP);
// 
S19:= 0          ;         // vertical 3-bump extraction
T19_VCF5:= S19*( 0.19364195*Y);
T19_VCF7:= S19*(-0.14124987*Y);
T19_VCA1:= S19*( 0.19371845*Y);
//VALUE, T19_VCF5;
//VALUE, T19_VCF7;
//VALUE, T19_VCA1;
//
S20:= 0          ;          // vertical 4-bump extraction
T20_VCF3:= S20*(0.17750078*Y -0.46906182*YP);
T20_VCF5:= S20*(-0.38368683E-01*Y  +0.61310905*YP);
T20_VCF7:= S20*(0.11126131*Y -0.66728365*YP);
T20_VCA1:= S20*( 0.90878882E-01*Y  +0.27176276*YP);
// 
S21:= 0          ;          // horizontal slow 4-bump p_injection TDH
X   = 0.0;
XP  = 0.0;
T21_DHC2:= -S21*( 0.20199332*X -0.97392946*XP)/ANGD;
T21_DHC4:= -S21*(-0.077447392*X +0.98914665*XP)/ANGD;
T21_DHC8:= -S21*(0.25857499*X -1.1977088*XP)/ANGD;
T21_DHD1:= -S21*(-0.22695553*X +1.7699569*XP)/ANGD;
//VALUE, T21_DHC2;
//VALUE, T21_DHC4;
//VALUE, T21_DHC8;
//VALUE, T21_DHD1;
//
S24:= 0          ;         // horizontal extraction slow 3-bump TDH3
//X:  CONSTANT = .02250 ;    // @ B6
//X:  CONSTANT = 0.0	;   // @ B6
T24_DHB4:= S24*(0.12687738)*X/ANGD;
T24_DHB8:= S24*(1.43801849E-02)*X/ANGD;
T24_DHC1:= S24*(0.13588530)*X/ANGD;
//
S25:= 0          ;         // horizontal extraction slow 3-bump TDH3
//X:  CONSTANT = .0300 ;     // @ D6
//X:  CONSTANT = 0.0   ;      // @ D6
T25_DHD4:= S25*(0.12712482)*X/ANGD;
T25_DHD8:= S25*(1.43290553E-02)*X/ANGD;
T25_DHE1:= S25*(0.13610920)*X/ANGD;
// 
// Slow correctors
//   kab, 8/31/07
// Calib. of correctors from BoosterTN 224, R.Thern
//  Bdl/A = 9.75e-5 Tm/A
//  so a kick (in radians) is (1/Brho)*(Bdl/A)*amps
// 
CorCalib:=0.0000975;
//
//  currents are called as DHCA2i, etc, initialized to 0
//
DHCA2i:=0.;
DHCA4i:=0.;
DHCA6i:=0.;
DHCA8i:=0.;
DHCB2i:=0.;
DHCB4i:=0.;
DHCB6i:=0.;
DHCB8i:=0.;
DHCC2i:=0.;
DHCC4i:=0.;
DHCC6i:=0.;
DHCC8i:=0.;
DHCD2i:=0.;
DHCD4i:=0.;
DHCD6i:=0.;
DHCD8i:=0.;
DHCE2i:=0.;
DHCE4i:=0.;
DHCE6i:=0.;
DHCE8i:=0.;
DHCF2i:=0.;
DHCF4i:=0.;
DHCF6i:=0.;
DHCF8i:=0.;
//
DVCA1i:=0.;
DVCA3i:=0.;
DVCA5i:=0.;
DVCA7i:=0.;
DVCB1i:=0.;
DVCB3i:=0.;
DVCB5i:=0.;
DVCB7i:=0.;
DVCC1i:=0.;
DVCC3i:=0.;
DVCC5i:=0.;
DVCC7i:=0.;
DVCD1i:=0.;
DVCD3i:=0.;
DVCD5i:=0.;
DVCD7i:=0.;
DVCE1i:=0.;
DVCE3i:=0.;
DVCE5i:=0.;
DVCE7i:=0.;
DVCF1i:=0.;
DVCF3i:=0.;
DVCF5i:=0.;
DVCF7i:=0.;
//
DHCA2k:=(1/BRHO)*CorCalib*DHCA2i;
DHCA4k:=(1/BRHO)*CorCalib*DHCA4i;
DHCA6k:=(1/BRHO)*CorCalib*DHCA6i;
DHCA8k:=(1/BRHO)*CorCalib*DHCA8i;
DHCB2k:=(1/BRHO)*CorCalib*DHCB2i;
DHCB4k:=(1/BRHO)*CorCalib*DHCB4i;
DHCB6k:=(1/BRHO)*CorCalib*DHCB6i;
DHCB8k:=(1/BRHO)*CorCalib*DHCB8i;
DHCC2k:=(1/BRHO)*CorCalib*DHCC2i;
DHCC4k:=(1/BRHO)*CorCalib*DHCC4i;
DHCC6k:=(1/BRHO)*CorCalib*DHCC6i;
DHCC8k:=(1/BRHO)*CorCalib*DHCC8i;
DHCD2k:=(1/BRHO)*CorCalib*DHCD2i;
DHCD4k:=(1/BRHO)*CorCalib*DHCD4i;
//DHCD6k:=(1/BRHO)*CorCalib*DHCD6i;
DHCD6k:=0.0                     ;  // missing
DHCD8k:=(1/BRHO)*CorCalib*DHCD8i;
DHCE2k:=(1/BRHO)*CorCalib*DHCE2i;
DHCE4k:=(1/BRHO)*CorCalib*DHCE4i;
DHCE6k:=(1/BRHO)*CorCalib*DHCE6i;
DHCE8k:=(1/BRHO)*CorCalib*DHCE8i;
DHCF2k:=(1/BRHO)*CorCalib*DHCF2i;
DHCF4k:=(1/BRHO)*CorCalib*DHCF4i;
//DHCF6k:=(1/BRHO)*CorCalib*DHCF6i;
DHCF6k:=0.0                     ;  // missing
DHCF8k:=(1/BRHO)*CorCalib*DHCF8i;
//
DVCA1k:=(1/BRHO)*CorCalib*DVCA1i;
DVCA3k:=(1/BRHO)*CorCalib*DVCA3i;
DVCA5k:=(1/BRHO)*CorCalib*DVCA5i;
DVCA7k:=(1/BRHO)*CorCalib*DVCA7i;
DVCB1k:=(1/BRHO)*CorCalib*DVCB1i;
DVCB3k:=(1/BRHO)*CorCalib*DVCB3i;
DVCB5k:=(1/BRHO)*CorCalib*DVCB5i;
DVCB7k:=(1/BRHO)*CorCalib*DVCB7i;
DVCC1k:=(1/BRHO)*CorCalib*DVCC1i;
DVCC3k:=(1/BRHO)*CorCalib*DVCC3i;
DVCC5k:=(1/BRHO)*CorCalib*DVCC5i;
DVCC7k:=(1/BRHO)*CorCalib*DVCC7i;
DVCD1k:=(1/BRHO)*CorCalib*DVCD1i;
DVCD3k:=(1/BRHO)*CorCalib*DVCD3i;
DVCD5k:=(1/BRHO)*CorCalib*DVCD5i;
DVCD7k:=(1/BRHO)*CorCalib*DVCD7i;
DVCE1k:=(1/BRHO)*CorCalib*DVCE1i;
DVCE3k:=(1/BRHO)*CorCalib*DVCE3i;
DVCE5k:=(1/BRHO)*CorCalib*DVCE5i;
DVCE7k:=(1/BRHO)*CorCalib*DVCE7i;
DVCF1k:=(1/BRHO)*CorCalib*DVCF1i;
DVCF3k:=(1/BRHO)*CorCalib*DVCF3i;
DVCF5k:=(1/BRHO)*CorCalib*DVCF5i;
DVCF7k:=(1/BRHO)*CorCalib*DVCF7i;
